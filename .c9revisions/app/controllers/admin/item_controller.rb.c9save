{"ts":1366884013166,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class Admin::ItemController < ApplicationController\n  \n  def destroy\n    item = Item.find(params[:id])\n    item.deleted = 1\n    item.save\n    \n    redirect_to \"/admin/rss/index\"\n  end\n  \n  def update\n    rssList = Rss.order(\"id DESC\")\n    @rssList = rssList\n    require \"rss\"\n    require \"rss/1.0\"\n    require \"rss/2.0\"\n    require 'rss/dublincore'\n    require 'rss/content'\n    require 'date'\n    startTime = Time.now.gmtime.to_i\n    puts \"start items\"\n    queue = Queue.new()\n    \n    rssList.each do |rss|\n      queue.push(rss)\n    end\n                \n    lock = Monitor.new\n    threadNum = 5\n    puts queue.size()\n    threads = []\n    for i in 0..threadNum do\n      t = Thread.start(queue, t){|queue, t|\n        while(queue.size() > 0)\n          rss = nil\n          lock.synchronize do\n            rss = queue.pop()\n          end\n          url = rss[:url]\n          if url == \"\" || url ==nil \n            continue\n          end\n            rssId = rss[:id]\n          # begin\n            rss_source = open(url).read\n            rss = RSS::Parser.parse(rss_source, false)\n            saveRssItem(rss, rssId)\n          # rescue => exc\n#             \n          # end\n        end\n      }\n      threads.push(t)\n    end\n    threads.each{|t|\n      t.join\n    }\n    \n    endTime = Time.now.gmtime.to_i\n    progress = endTime - startTime\n    puts \"end:\" + progress.to_s\n    redirect_to \"/admin/rss/index\"\n  end\n  \n# private ==========================================\n  private\n  \n  def saveRssItem(rss, rssId)\n    \n    itemList = nil\n    if rss.items\n      itemList = rss.items\n    else\n      \n    end\n    \n    itemList.each do |item|\n      saveItem(item, rssId)\n    end\n    \n  end\n  \n  def saveItem(item, rssId)\n    date = nil\n    \n    if item.instance_of?(RSS::Atom::Feed::Entry)\n      # TODO atomはよくわからん\n      date = DateTime.parse(item.updated.to_s);\n    elsif item.dc_date\n      date = DateTime.parse(item.dc_date.to_s);\n    elsif item.pubDate != nil\n      date = DateTime.parse(item.pubDate.to_s);      \n    end\n    \n    if date == nil \n      return \n    end\n    pubdate = date.to_time.to_i\n    \n    unless item.instance_of?(RSS::Atom::Feed::Entry)\n      imageList = item.content_encoded.to_s.scan(/img.+src=[\\\"|\\']?([\\-_\\.\\!\\~\\*\\'\\(\\)a-zA-Z0-9\\;\\/\\?\\:@&=\\$\\,\\%\\#]+\\.(jpg|jpeg|png|gif|bmp))/i)\n      unless imageList[0]\n        imageList = item.description.to_s.scan(/img.+src=[\\\"|\\']?([\\-_\\.\\!\\~\\*\\'\\(\\)a-zA-Z0-9\\;\\/\\?\\:@&=\\$\\,\\%\\#]+\\.(jpg|jpeg|png|gif|bmp))/i)\n      end\n    end\n    \n    model = Item.new\n    if(!item.instance_of?(RSS::Atom::Feed::Entry) and imageList[0])\n      model.image_url = imageList[0][0]\n    else\n      model.image_url = nil\n    end\n    model.link = item.link.to_s.gsub(/<\\/?[^>]*>/, \"\")\n    model.pubdate = pubdate\n    model.rss_id = rssId\n    model.title = item.title.to_s.gsub(/<\\/?[^>]*>/, \"\")\n    model.tweet_count = 0\n    \n    if model.title.include?(\"PR:\")\n      return\n    end\n    \n    if model.link.include?(\":80\")\n      return\n    end\n    \n    if model.link == nil\n      return\n    end\n    \n    if existsItem(model)\n      return\n    end\n    \n    model.save()\n  end\n  \n  # link unique\n  def existsItem(model)\n    itemList = Item.where([\"link = ? AND rss_id = ?\", model.link, model.rss_id]);\n    return itemList.count != 0\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":3269}]],"length":3269}
{"contributors":[],"silentsave":false,"ts":1366884149115,"patch":[[{"diffs":[[0,"unt = 0\n"],[1,"    model.deleted = 0\n"],[0,"    \n   "]],"start1":2844,"start2":2844,"length1":16,"length2":38}]],"length":3291,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366972988391,"patch":[[{"diffs":[[0,"m = "],[-1,"5"],[1,"1"],[0,"\n   "]],"start1":591,"start2":591,"length1":9,"length2":9},{"diffs":[[0,"deleted = 0\n"],[1,"    puts model.title\n"],[0,"    \n    if "]],"start1":2862,"start2":2862,"length1":24,"length2":45}]],"length":3312,"saved":false}
{"ts":1366973005860,"patch":[[{"diffs":[[0,"adNum = "],[-1,"1"],[1,"2"],[0,"\n    put"]],"start1":587,"start2":587,"length1":17,"length2":17}]],"length":3312,"saved":false}
{"ts":1366973023927,"patch":[[{"diffs":[[0,"adNum = "],[-1,"2"],[1,"3"],[0,"\n    put"]],"start1":587,"start2":587,"length1":17,"length2":17}]],"length":3312,"saved":false}
{"ts":1366973263953,"patch":[[{"diffs":[[0,"m = "],[-1,"3"],[1,"5"],[0,"\n   "]],"start1":591,"start2":591,"length1":9,"length2":9}]],"length":3312,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367064862922,"patch":[[{"diffs":[[0,"m = "],[-1,"5"],[1,"3"],[0,"\n   "]],"start1":591,"start2":591,"length1":9,"length2":9}]],"length":3312,"saved":false}
